#!/usr/bin/env ruby

require 'skyrack/roper'
require 'skyrack/gadget_db'
require 'skyrack/version'
require 'optparse'

def exit_with_arg_error(opts, str=nil)
  puts str if str
  puts opts
  exit 1
end

def check_registers_args(search, db)
  for reg in [:src, :dst, :preserve] do
    next if !search[reg] || search[reg].inject(true) { |b, a| b &= (db.regs + ['regs']).include?(a) }
    msg = ""
    msg << "%s: %s is not valid for cpu %s.\nValid registers are: %s"	%
    [reg.to_s, search[reg], db.cpu.class, db.regs.inspect]
    msg << "or 'regs' (means all cpu registers)"
    exit_with_arg_error(msg)
  end
end

$verbosity = 0
opt = {}
opt[:info] = false
opt[:db] = { :type => nil }

search = {}
search[:src] = []
search[:dst] = []
search[:limit] = 10

search[:pre] = {}
search[:post] = {}
search[:any] = []


opts = OptionParser.new do |opts|
  opts.version = Skyrack::VERSION

  opts.banner  = "Usage : #{opts.program_name} -f file.sqlite3 -a mov -d eax\n" % File.basename(__FILE__)
  opts.banner += "        " + opts.ver

  opts.separator "\nGeneral options"
  opts.on("-v", "--verbosity", "Use more than once to increase verbosity") do
    $verbosity += 1
  end
  opts.on("-f", "--file FILENAME", String, "sqlite3 db") do |f|
    opt[:db][:type] = :sqlite; opt[:db][:filename] = f
  end
  opts.on(      "--info", "display bin informations") { opt[:info] = true }

  opts.separator "Search options"
  opts.on("-a", "--anywhere instr", String,
          "multiple instructions (xor eax, eax). Usable multiple times") do |a|
            search[:any] << a.split(/[;|]/)
          end
  opts.on("-s", "--source      REG", Array, "src operand (rax, rbx...)") do |s|
    search[:src] = s
  end
  opts.on("-d", "--destination REG", Array, "dest operand (rax, rbx...)") do |d|
    search[:dst] = d
  end
  opts.on("-i", "--instruction INST", String, "instr (mov eax, [ebx+1])") do |i|
    search[:instr] = Instr.assemble i
  end

  opts.separator "Filtering options"
  opts.on("-l", "--limit INT", Integer,
          "max results to display, 0 = no limit. Defaults to first 10") do |l|
            search[:limit] = l
          end
  end
  opts.on(      "--regs", "show only from and to CPU regs") do
    search[:pre][:regs] = true
  end
  opts.on("-p", "--preserve-target", String,
          "first instruction's regsiter stays unaffected till ret") do
            search[:post][:preserve_target] = true
          end
  opts.on("-e", "--preserve-eip", String,
          "instructions preserve eip (or rip) till ret") do
            search[:post][:preserve_eip] = true
          end
  opts.on(      "--preserve-regs", Array, "preserve registers (rax,rbx...)") do |r|
    search[:post][:preserve] = r
  end
  opts.on(      "--address ADDR", String, "search gadgets starting at @addr") do |a|
    search[:address] = a.to_i(16)
  end
end

opts.parse!

begin
  db = GadgetDb.new(opt[:db][:filename])
rescue GadgetDbException => e
  $stderr.puts "no gadget database found (generate using sky_build_db or specify path using -f)"
  exit(-1)
end

check_registers_args(search, db)
search[:src] = db.regs + [''] if search[:src].first == 'reg'
search[:dst] = db.regs + [''] if search[:dst].first == 'reg'
search.delete :pre

if search[:instr] then
  raise "unimplemented"
  expr = search[:instr].expr[:eax].reduce
  db.find_equivalent_expr(expr) do |g|
    puts g
    exit
  end
elsif search[:address] then
  puts db.gadget_build(search[:address]).to_s
else
  db.search_gadget(search) do |list|
    if $verbosity >= 1 then
      puts list.to_s
    else
      puts "0x%08x %s" % [list.base_addr, list.map {|i| i.to_s}.join(" ; ")]
    end
  end
end
